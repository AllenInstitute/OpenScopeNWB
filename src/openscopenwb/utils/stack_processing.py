import os
from typing import Tuple, Union
import numpy as np
import matplotlib.pyplot as pl
import tifffile
import tifftools
from PIL import Image
import subprocess

def merge_tiff_files(file_paths, output_path):
    # check if the output file already exists
    if os.path.exists(output_path):
        raise Exception("Output file already exists. Please choose a different path.")
    
    tifftools.tiff_concat(file_paths, output_path)
        # run the command using subprocess.call()


# Credit to Natalia for this function from https://github.com/nataliaorlova/meso_tools.git
def align_phase(image : np.array, do_align : bool = True, offset : Union[int, None] = None) -> Union[int, np.array]:
    """
    Function to align line phase in an image generated by a bidirectional scanning 

    Parameters
    ----------
    image : np.array
        2D numpy array representing an image, i.e. page of a multipage tiff file

    Returns
    -------
    image_aligned : np.array
        2D numpy array representing phase-aligned image
    """
    # calculate mean offset in the frame:
    if not offset :
        # calculate mean offset in the frame:
        offsets = []
        i=1 
        while i < len(image)-1 : # loop over each pair of lines to calculate pairwise correlation
            offset = image.shape[0]/2 - np.argmax(np.correlate(image[i], image[i+1], mode='same'))
            offsets.append(offset)
            i += 2
        offset = int(np.round(np.mean(offsets)))
    if do_align: 
        if offset > 0:
            # move every line by offset/2
            image_aligned = np.zeros((image.shape[0], int(image.shape[1]+offset)))

            i=0
            while i < len(image)-1: # loop over each pair of lines to insert original data with offset
                image_aligned[i,: 0-offset] = image[i, :]
                image_aligned[i+1, offset:] = image[i+1]
                i += 2

            image_aligned = image_aligned[:, 1:image_aligned.shape[1]-offset]
            return offset, image_aligned
        else:
            return offset, image
    else:
        return offset

surface_soma_stack1_path = r"/allen/programs/mindscope/workgroups/openscope/aws_buckets_auto_upload/2022-dendritic-coupling/20230306_661749_Visp_Vislm_surface_soma_00004.tif"
surface_soma_stack2_path = r"/allen/programs/mindscope/workgroups/openscope/aws_buckets_auto_upload/2022-dendritic-coupling/20230306_647715_V1_surface_soma_retake3.tif"

roi_names_2rois = ['V1', 'LM', 'AM', 'PM']

stacks = [surface_soma_stack1_path]
rois_1 = []
rois_2 = []


for stack in stacks:

    tiff = tifffile.TiffFile(stack, mode='rb')
    num_frames = len(tiff.pages)
    #stack parameters
    ROIs = 2
    image_dim = 768
    spacer = 24
    chunk_size = 300
    chunk_num = int(np.ceil(num_frames / chunk_size))
    print(f"Stack will be processed in {chunk_num} chunks")

    # Initiallize arrays for averaged stacks, mean and variance outputs
    roi1 = np.zeros((int(num_frames/chunk_size), image_dim , image_dim))
    roi2 = np.zeros((int(num_frames/chunk_size), image_dim , image_dim))

    for i in range(chunk_num):

        # load chunk of tiff:
        frame_start = chunk_size*i 
        frame_end = chunk_size*(i+1)

        # handling of the last chunk 
        if frame_end > num_frames:
            frame_end = num_frames
        
        # Load tiff_array
        try:
            tiff_array = tiff.asarray(range(frame_start,frame_end))
        except RuntimeError as e:
            print(f"Error: {e} occurred while processing frame {frame_start} to {frame_end}. Skipping this frame...")
            continue        

        # split and average 2 rois - single planes
        offset, roi1[i,:,:] = align_phase(tiff_array[:,:image_dim,:].mean(axis=0))
        offset, roi2[i,:,:] = align_phase(tiff_array[:,image_dim+spacer:2*image_dim+spacer,:].mean(axis=0))
        rois_1.append(roi1)
        rois_2.append(roi2)



for i, roi in enumerate(rois_1):
    # generate file name
    tif_file = f"/allen/programs/mindscope/workgroups/openscope/ahad/test_tiff/roi_{i+1}.tif"
    
    # write roi to tif file
    tifffile.imwrite(tif_file, roi)

# create a list of all the tif file names
tif_files = [f"/allen/programs/mindscope/workgroups/openscope/ahad/test_tiff/roi_{i+1}.tif" for i in range(len(rois_1))]
merge_tiff_files(tif_files, "/allen/programs/mindscope/workgroups/openscope/ahad/test_tiff/merged.tif")
for tif_file in tif_files:
    os.remove(tif_file)

for i, roi in enumerate(rois_2):
    # generate file name
    tif_file = f"/allen/programs/mindscope/workgroups/openscope/ahad/test_tiff/roi_{i+1}.tif"
    
    # write roi to tif file
    tifffile.imwrite(tif_file, roi)

# create a list of all the tif file names
tif_files = [f"/allen/programs/mindscope/workgroups/openscope/ahad/test_tiff/roi_{i+1}.tif" for i in range(len(rois_2))]
merge_tiff_files(tif_files, "/allen/programs/mindscope/workgroups/openscope/ahad/test_tiff/merged2.tif")
for tif_file in tif_files:
    os.remove(tif_file)